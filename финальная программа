#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_SIZE 500000

// Функция для создания файла со случайными числами
void create_data_file(const char *fname, int elements, int low, int high) {
    FILE *fp = fopen(fname, "w");
    if (!fp) {
        fprintf(stderr, "Не удалось создать файл %s\n", fname);
        return;
    }

    srand(time(0));
    for (int i = 0; i < elements; i++) {
        int val = low + rand() % (high - low + 1);
        fprintf(fp, "%d\n", val);
    }
    fclose(fp);
    printf("Создан файл %s с %d числами от %d до %d\n", fname, elements, low, high);
}

// Функция для загрузки данных из файла в массив
int* load_data(const char *fname, int *elements_count) {
    FILE *fp = fopen(fname, "r");
    if (!fp) {
        fprintf(stderr, "Файл %s не найден\n", fname);
        return NULL;
    }

    int *data = malloc(MAX_SIZE * sizeof(int));
    if (!data) {
        fprintf(stderr, "Ошибка выделения памяти\n");
        fclose(fp);
        return NULL;
    }

    *elements_count = 0;
    while (*elements_count < MAX_SIZE && fscanf(fp, "%d", &data[*elements_count]) == 1) {
        (*elements_count)++;
    }
    fclose(fp);
    return data;
}

// Функция сортировки по возрастанию (метод выбора)
void asc_sort(int *arr, int n, int *swaps) {
    for (int i = 0; i < n - 1; i++) {
        int min_pos = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_pos]) {
                min_pos = j;
            }
        }
        if (min_pos != i) {
            int temp = arr[i];
            arr[i] = arr[min_pos];
            arr[min_pos] = temp;
            (*swaps)++;
        }
    }
}

// Функция сортировки по убыванию (метод выбора)
void desc_sort(int *arr, int n, int *swaps) {
    for (int i = 0; i < n - 1; i++) {
        int max_pos = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] > arr[max_pos]) {
                max_pos = j;
            }
        }
        if (max_pos != i) {
            int temp = arr[i];
            arr[i] = arr[max_pos];
            arr[max_pos] = temp;
            (*swaps)++;
        }
    }
}

// Функция проверки сортировки по возрастанию
int verify_asc(int *arr, int n) {
    for (int i = 0; i < n - 1; i++) {
        if (arr[i] > arr[i + 1]) return 0;
    }
    return 1;
}

// Функция проверки сортировки по убыванию
int verify_desc(int *arr, int n) {
    for (int i = 0; i < n - 1; i++) {
        if (arr[i] < arr[i + 1]) return 0;
    }
    return 1;
}

// Функция сохранения результатов в файл
void save_results(const char *fname, int *arr, int n) {
    FILE *fp = fopen(fname, "w");
    if (!fp) {
        fprintf(stderr, "Ошибка создания файла %s\n", fname);
        return;
    }

    for (int i = 0; i < n; i++) {
        fprintf(fp, "%d\n", arr[i]);
    }
    fclose(fp);
    printf("Результаты сохранены в %s\n", fname);
}

// Основная функция обработки сортировки
void process_sorting(int *data, int count) {
    int swaps = 0;
    printf("Выберите тип сортировки:\n");
    printf("1 - По возрастанию\n");
    printf("2 - По убыванию\n");
    printf("Выбор: ");
    int choice;
    scanf("%d", &choice);
    
    clock_t start = clock();
    
    if (choice == 1) {
        asc_sort(data, count, &swaps);
    } else if (choice == 2) {
        desc_sort(data, count, &swaps);
    } else {
        printf("Неверный выбор\n");
        return;
    }
    
    double duration = (double)(clock() - start) / CLOCKS_PER_SEC;
    printf("Сортировка выполнена за %.4f сек, операций: %d\n", duration, swaps);
    
    char out_file[256];
    printf("Введите имя файла для сохранения: ");
    scanf("%255s", out_file);
    save_results(out_file, data, count);
}

// Главная функция с основным меню программы
int main() {
    int *numbers = 0;
    int count = 0;
    int option;
    
    do {
        printf("\nГлавное меню:\n");
        printf("1. Создать новый файл с числами\n");
        printf("2. Загрузить и обработать файл\n");
        printf("0. Выход\n");
        printf("Выбор: ");
        scanf("%d", &option);
        
        switch (option) {
            case 1: {
                char filename[256];
                int num_count, min_val, max_val;
                
                printf("Имя файла: ");
                scanf("%255s", filename);
                printf("Количество чисел (макс. %d): ", MAX_SIZE);
                scanf("%d", &num_count);
                printf("Минимальное значение: ");
                scanf("%d", &min_val);
                printf("Максимальное значение: ");
                scanf("%d", &max_val);
                
                if (num_count > 0 && num_count <= MAX_SIZE) {
                    create_data_file(filename, num_count, min_val, max_val);
                } else {
                    printf("Недопустимое количество\n");
                }
                break;
            }
            case 2: {
                char filename[256];
                printf("Имя файла для обработки: ");
                scanf("%255s", filename);
                
                numbers = load_data(filename, &count);
                if (numbers && count > 0) {
                    process_sorting(numbers, count);
                }
                break;
            }
            case 0:
                printf("Завершение работы\n");
                break;
            default:
                printf("Неверная команда\n");
        }
        
        if (numbers) {
            free(numbers);
            numbers = NULL;
        }
    } while (option != 0);
    
    return 0;
}
