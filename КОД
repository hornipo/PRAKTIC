#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>
#include <string.h>  

// Функция для безопасного ввода целого числа
int input_int(const char* prompt) {
    int value;
    char buffer[100];
    
    while(1) {
        printf("%s", prompt);
        if(fgets(buffer, sizeof(buffer), stdin) == NULL) {
            printf("Ошибка ввода!\n");
            continue;
        }
        
        // Проверяем, что введено целое число и нет мусора после числа
        if(sscanf(buffer, "%d", &value) == 1) {
            // Проверяем, что в строке нет других символов кроме числа
            char *endptr;
            strtol(buffer, &endptr, 10);
            if(*endptr == '\n' || *endptr == '\0') {
                return value;
            }
        }
        
        printf("Ошибка! Введите целое число: ");
    }
}

int main() {
    while(1) {
        FILE *f;
        int *mas = NULL;
        int n, a, b, i, j, temp, choice;
        clock_t start, end;
        
        printf("\n\nНажмите ESC для выхода или любую другую клавишу для продолжения...\n");
        
        // Проверка нажатия ESC
        if(getch() == 27) {
            printf("\nВыход из программы...\n");
            break;
        }
        
        // Ввод количества чисел с проверкой
        n = input_int("\nСколько чисел сгенерировать? ");
        while(n <= 0) {
            printf("Число должно быть больше нуля! ");
            n = input_int("Попробуйте снова: ");
        }
        
        mas = (int*)malloc(n * sizeof(int));
        if(mas == NULL) {
            printf("Не хватило памяти!\n");
            return 1;
        }
        
        // Вводим диапазон с проверками
        a = input_int("Минимальное число: ");
        
        b = input_int("Максимальное число: ");
        while(b < a) {
            printf("Максимум должен быть больше минимума! ");
            b = input_int("Введите снова: ");
        }
        
        // Генерируем числа
        srand(time(0));
        for(i = 0; i < n; i++) {
            mas[i] = rand() % (b - a + 1) + a;
        }
        
        // Сохраняем несортированный массив
        f = fopen("unsorted.txt", "w");
        if(f == NULL) {
            printf("Не получилось создать файл!\n");
            free(mas);
            return 1;
        }
        for(i = 0; i < n; i++) {
            fprintf(f, "%d\n", mas[i]);
        }
        fclose(f);
        printf("Числа записаны в unsorted.txt\n");
        
        // Выбираем сортировку с проверкой
        printf("\nКак сортировать?\n");
        printf("1 - По возрастанию\n");
        printf("2 - По убыванию\n");
        
        choice = input_int("Ваш выбор: ");
        while(choice != 1 && choice != 2) {
            printf("Ошибка! Введите 1 или 2: ");
            choice = input_int("");
        }
        
        // Сортировка выбором
        start = clock();
        for(i = 0; i < n - 1; i++) {
            int extreme_index = i;
            
            for(j = i + 1; j < n; j++) {
                if((choice == 1 && mas[j] < mas[extreme_index]) || 
                   (choice == 2 && mas[j] > mas[extreme_index])) {
                    extreme_index = j;
                }
            }
            
            if(extreme_index != i) {
                temp = mas[i];
                mas[i] = mas[extreme_index];
                mas[extreme_index] = temp;
            }
        }
        end = clock();
        
        // Сохраняем результат
        f = fopen("sorted.txt", "w");
        if(f == NULL) {
            printf("Не получилось создать файл!\n");
            free(mas);
            return 1;
        }
        for(i = 0; i < n; i++) {
            fprintf(f, "%d\n", mas[i]);
        }
        fclose(f);
        
        // Выводим информацию
        printf("\nРезультат:\n");
        printf("Время сортировки: %.3f сек\n", (double)(end - start) / CLOCKS_PER_SEC);
        printf("Результат в sorted.txt\n");
        
        free(mas);
    }
    return 0;
} 
